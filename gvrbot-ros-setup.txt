***************************************************************************
******** Setup GVR-Bot ROS Development Environment and Controller *********
***************************************************************************
Rev1 (09/13/2016)

The following steps should be done on an Ubuntu 14.04 machine (can be virtual) with with 'ros-indigo-desktop-full' installed.

>> Open .bashrc and add the two lines to the end of your ~/.bashrc file (they may already exist if your laptop was imaged by EECS).
	gksu gedit ~/.bashrc	 
    source /opt/ros/indigo/setup.bash
    source /home/user1/catkin_ws/devel/setup.bash

>> Install the following packages:
    sudo apt-get install openssh-server
    sudo apt-get install ros-indigo-teleop-twist-joy 
    sudo apt-get install ros-indigo-joy
    sudo apt-get install ros-indigo-qt-create
    sudo apt-get install ros-indigo-qt-build

>> Copy gvrbot_controller (gvrbot_controller was initially created by using the catkin_create_qt_pkg command) and gvrbot directories from repository to this destination on your machine:
    /home/user1/catkin_ws/src/ 

>> Once you've moved gvrbot_controller and gvrbot to '/home/gvrbot/gvrbot-ros/src', run the following:
    cd /home/user1/catkin_ws/ 
    catkin_make
    ***NOTE: If gvrbot package is NOT already built you will have to run 'source /home/user1/catkin_ws/devel/setup.bash' or 'source ~/.bashrc' after 'catkin_make' command and then run 'catkin_make' again, because gvrbot_controller depends on gvrbot package ***

>> Edit the 'hosts' file to add IP address and host name for the default GVR-Bot. This will enable ROS controller to subscribe to topics published from GVR-Bot.
    gksu gedit /etc/hosts    
   Add the following line (if your GVR-Bot is different, this will need to match it): 
    192.168.0.101 gvrbotv1
-------------------------------------------------------------------------------------------------------------------------------

To run the gvrbot controller software from the development machine, do the following. 

>> Connect to the robot computer over WiFi to SSID 'GVR-BOT-0xx' or using a CAT5 cable.
    WiFi password is 'modern0325'

>> Make sure you can ping the GVR-Bot.
    ping 192.168.0.101
   Once you see a response, hit Ctrl+C to terminate pinging.

>> Attach XBOX 360 joystick. Run the below script to test the joystick. 
    sudo jstest /dev/input/js1'
   If data doesn't change, try js0. If the default joystick identifier is different than js1, you will need to modify the joystick path in the file /grvbot_controller/controller.launch 
 
>> From the /home/user1/catkin_ws/grvbot_controller/scripts directory, run controller_start.sh 
    ./controller_start.sh
   If it doesn't work, make sure controller_start.sh is made an executable. 

>> Once thr GUI opens, enter your IP in the 'Ros IP' text field, then select Connect.
 
>> The controller should start receiving data from GVR-Bot, and you should be able to control flipper and e-stop with joystick (LB/RB, and Start/Back respectively). 

>> Move left joystick to send joystick commands, but due to the way teleop_twist_joy node works, you have to hold down the A button while you're moving the left joystick. 
*****************************************

Troubleshooting options if you notice either the Red or Green LED flashing.  

1. Using GDTv1.4 or later:

>> On a windows machine, open GDTv1.4

>> Make sure you are connected to the robot computer, either wirelessly or wired.

>> Reset all 3 microcontroller boards by clicking on the three respective 'Application Mode' buttons.

>> Power cycle the robot. 

2. Using command line if GDT doesn't respond: (Steps to reset the 3 microcontrollers)
>>  First SSH into gvrbot using IP address 192.168.0.101. username is 'gvrbot' and password is 'modern'

>>  Then depending on the board you wish to reset, execute the resepective commands.

    To restore Power Management Micro from bootloader mode to application mode:
    1.  ./scripts/stop_gvrbot_ros.sh
        After you see 'gvrbot stop/waiting',    
    2.  sudo /opt/gvrbot-dfu-programmer/bin/dfu-programmer gvrbot-pm start
        This will cause the robot to power cycle. On bootup, the power micro should be in application mode indicated by a steady green light.

    To restore Mobility Micro from bootloader mode to application mode:
    1.   ./scripts/stop_gvrbot_ros.sh
        After you see 'gvrbot stop/waiting',    
    2.  sudo /opt/gvrbot-dfu-programmer/bin/dfu-programmer gvrbot-mobility start
        This will cause the flashing red LED to turn off. You need to power cycle the robot for changes to take effect. 
        On bootup, both the red and green LEDs should glow steadily.
        If the red light still flashes, the Flipper micro may be in bootloader mode and needs to be reset.

    To restore Flipper Micro from bootloader mode to application mode:
    1.   ./scripts/stop_gvrbot_ros.sh
        After you see 'gvrbot stop/waiting',    
    2.  sudo /opt/gvrbot-dfu-programmer/bin/dfu-programmer gvrbot-flipper start
        This will cause the flashing red LED to turn off. You need to power cycle the robot for changes to take effect. 
        On bootup, both the red and green LEDs should glow steadily.

After resetting the microcontrollers, run controller_start.sh in /home/gvrbot/gvrbot-ros/src/gvrbot_controller/scripts and verify that communication has been established with the three boards.
 
